// Code generated by MockGen. DO NOT EDIT.
// Source: vfs.go

// Package vfs is a generated GoMock package.
package vfs

import (
	reflect "reflect"

	model "github.com/blackhorseya/iscool-assessment/entity/model"
	gomock "go.uber.org/mock/gomock"
)

// MockVirtualFileSystem is a mock of VirtualFileSystem interface.
type MockVirtualFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualFileSystemMockRecorder
}

// MockVirtualFileSystemMockRecorder is the mock recorder for MockVirtualFileSystem.
type MockVirtualFileSystemMockRecorder struct {
	mock *MockVirtualFileSystem
}

// NewMockVirtualFileSystem creates a new mock instance.
func NewMockVirtualFileSystem(ctrl *gomock.Controller) *MockVirtualFileSystem {
	mock := &MockVirtualFileSystem{ctrl: ctrl}
	mock.recorder = &MockVirtualFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualFileSystem) EXPECT() *MockVirtualFileSystemMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockVirtualFileSystem) CreateFile(username, foldername, filename, description string) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", username, foldername, filename, description)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockVirtualFileSystemMockRecorder) CreateFile(username, foldername, filename, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockVirtualFileSystem)(nil).CreateFile), username, foldername, filename, description)
}

// CreateFolder mocks base method.
func (m *MockVirtualFileSystem) CreateFolder(username, foldername, description string) (*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", username, foldername, description)
	ret0, _ := ret[0].(*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockVirtualFileSystemMockRecorder) CreateFolder(username, foldername, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockVirtualFileSystem)(nil).CreateFolder), username, foldername, description)
}

// DeleteFile mocks base method.
func (m *MockVirtualFileSystem) DeleteFile(username, foldername, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", username, foldername, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockVirtualFileSystemMockRecorder) DeleteFile(username, foldername, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockVirtualFileSystem)(nil).DeleteFile), username, foldername, filename)
}

// DeleteFolder mocks base method.
func (m *MockVirtualFileSystem) DeleteFolder(username, foldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", username, foldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockVirtualFileSystemMockRecorder) DeleteFolder(username, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockVirtualFileSystem)(nil).DeleteFolder), username, foldername)
}

// ListFiles mocks base method.
func (m *MockVirtualFileSystem) ListFiles(username, foldername, sortBy, order string) ([]*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", username, foldername, sortBy, order)
	ret0, _ := ret[0].([]*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockVirtualFileSystemMockRecorder) ListFiles(username, foldername, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockVirtualFileSystem)(nil).ListFiles), username, foldername, sortBy, order)
}

// ListFolders mocks base method.
func (m *MockVirtualFileSystem) ListFolders(username, sortBy, order string) ([]*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolders", username, sortBy, order)
	ret0, _ := ret[0].([]*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolders indicates an expected call of ListFolders.
func (mr *MockVirtualFileSystemMockRecorder) ListFolders(username, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolders", reflect.TypeOf((*MockVirtualFileSystem)(nil).ListFolders), username, sortBy, order)
}

// RegisterUser mocks base method.
func (m *MockVirtualFileSystem) RegisterUser(username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockVirtualFileSystemMockRecorder) RegisterUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockVirtualFileSystem)(nil).RegisterUser), username)
}

// RenameFolder mocks base method.
func (m *MockVirtualFileSystem) RenameFolder(username, foldername, newFoldername string) (*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", username, foldername, newFoldername)
	ret0, _ := ret[0].(*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockVirtualFileSystemMockRecorder) RenameFolder(username, foldername, newFoldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockVirtualFileSystem)(nil).RenameFolder), username, foldername, newFoldername)
}
