// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package fsx is a generated GoMock package.
package fsx

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileManager) CreateFile(username, foldername, filename, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", username, foldername, filename, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileManagerMockRecorder) CreateFile(username, foldername, filename, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileManager)(nil).CreateFile), username, foldername, filename, description)
}

// DeleteFile mocks base method.
func (m *MockFileManager) DeleteFile(username, foldername, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", username, foldername, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileManagerMockRecorder) DeleteFile(username, foldername, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileManager)(nil).DeleteFile), username, foldername, filename)
}

// ListFiles mocks base method.
func (m *MockFileManager) ListFiles(username, foldername, sortBy, order string) ([]*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", username, foldername, sortBy, order)
	ret0, _ := ret[0].([]*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFileManagerMockRecorder) ListFiles(username, foldername, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileManager)(nil).ListFiles), username, foldername, sortBy, order)
}
