// Code generated by MockGen. DO NOT EDIT.
// Source: folder.go

// Package fsx is a generated GoMock package.
package fsx

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFolderManager is a mock of FolderManager interface.
type MockFolderManager struct {
	ctrl     *gomock.Controller
	recorder *MockFolderManagerMockRecorder
}

// MockFolderManagerMockRecorder is the mock recorder for MockFolderManager.
type MockFolderManagerMockRecorder struct {
	mock *MockFolderManager
}

// NewMockFolderManager creates a new mock instance.
func NewMockFolderManager(ctrl *gomock.Controller) *MockFolderManager {
	mock := &MockFolderManager{ctrl: ctrl}
	mock.recorder = &MockFolderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderManager) EXPECT() *MockFolderManagerMockRecorder {
	return m.recorder
}

// CreateFolder mocks base method.
func (m *MockFolderManager) CreateFolder(username, foldername, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", username, foldername, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockFolderManagerMockRecorder) CreateFolder(username, foldername, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockFolderManager)(nil).CreateFolder), username, foldername, description)
}

// DeleteFolder mocks base method.
func (m *MockFolderManager) DeleteFolder(username, foldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", username, foldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockFolderManagerMockRecorder) DeleteFolder(username, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockFolderManager)(nil).DeleteFolder), username, foldername)
}

// ListFolders mocks base method.
func (m *MockFolderManager) ListFolders(username, sortBy, order string) ([]*Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolders", username, sortBy, order)
	ret0, _ := ret[0].([]*Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolders indicates an expected call of ListFolders.
func (mr *MockFolderManagerMockRecorder) ListFolders(username, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolders", reflect.TypeOf((*MockFolderManager)(nil).ListFolders), username, sortBy, order)
}

// RenameFolder mocks base method.
func (m *MockFolderManager) RenameFolder(username, foldername, newFoldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", username, foldername, newFoldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockFolderManagerMockRecorder) RenameFolder(username, foldername, newFoldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockFolderManager)(nil).RenameFolder), username, foldername, newFoldername)
}
