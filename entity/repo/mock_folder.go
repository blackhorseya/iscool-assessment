// Code generated by MockGen. DO NOT EDIT.
// Source: folder.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/iscool-assessment/entity/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFolderManager is a mock of FolderManager interface.
type MockFolderManager struct {
	ctrl     *gomock.Controller
	recorder *MockFolderManagerMockRecorder
}

// MockFolderManagerMockRecorder is the mock recorder for MockFolderManager.
type MockFolderManagerMockRecorder struct {
	mock *MockFolderManager
}

// NewMockFolderManager creates a new mock instance.
func NewMockFolderManager(ctrl *gomock.Controller) *MockFolderManager {
	mock := &MockFolderManager{ctrl: ctrl}
	mock.recorder = &MockFolderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderManager) EXPECT() *MockFolderManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFolderManager) Create(ctx context.Context, owner *model.User, foldername, description string) (*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner, foldername, description)
	ret0, _ := ret[0].(*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFolderManagerMockRecorder) Create(ctx, owner, foldername, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFolderManager)(nil).Create), ctx, owner, foldername, description)
}

// CreateFile mocks base method.
func (m *MockFolderManager) CreateFile(ctx context.Context, owner *model.User, folder *model.Folder, filename, description string) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, owner, folder, filename, description)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFolderManagerMockRecorder) CreateFile(ctx, owner, folder, filename, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFolderManager)(nil).CreateFile), ctx, owner, folder, filename, description)
}

// Delete mocks base method.
func (m *MockFolderManager) Delete(ctx context.Context, owner *model.User, foldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, owner, foldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFolderManagerMockRecorder) Delete(ctx, owner, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFolderManager)(nil).Delete), ctx, owner, foldername)
}

// DeleteFile mocks base method.
func (m *MockFolderManager) DeleteFile(ctx context.Context, owner *model.User, folder *model.Folder, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, owner, folder, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFolderManagerMockRecorder) DeleteFile(ctx, owner, folder, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFolderManager)(nil).DeleteFile), ctx, owner, folder, filename)
}

// GetByName mocks base method.
func (m *MockFolderManager) GetByName(ctx context.Context, owner *model.User, foldername string) (*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, owner, foldername)
	ret0, _ := ret[0].(*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockFolderManagerMockRecorder) GetByName(ctx, owner, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockFolderManager)(nil).GetByName), ctx, owner, foldername)
}

// List mocks base method.
func (m *MockFolderManager) List(ctx context.Context, owner *model.User, sortBy, order string) ([]*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, owner, sortBy, order)
	ret0, _ := ret[0].([]*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFolderManagerMockRecorder) List(ctx, owner, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFolderManager)(nil).List), ctx, owner, sortBy, order)
}

// ListFiles mocks base method.
func (m *MockFolderManager) ListFiles(ctx context.Context, owner *model.User, folder *model.Folder, sortBy, order string) ([]*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, owner, folder, sortBy, order)
	ret0, _ := ret[0].([]*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFolderManagerMockRecorder) ListFiles(ctx, owner, folder, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFolderManager)(nil).ListFiles), ctx, owner, folder, sortBy, order)
}

// Rename mocks base method.
func (m *MockFolderManager) Rename(ctx context.Context, owner *model.User, foldername, newFoldername string) (*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, owner, foldername, newFoldername)
	ret0, _ := ret[0].(*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename.
func (mr *MockFolderManagerMockRecorder) Rename(ctx, owner, foldername, newFoldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFolderManager)(nil).Rename), ctx, owner, foldername, newFoldername)
}
